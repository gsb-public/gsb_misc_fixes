<?php

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gsb_misc_fixes_form_node_form_alter(&$form, &$form_state) {
  $form['#submit'][] = 'gsb_misc_fixes_menufix_node_submit';
}

function gsb_misc_fixes_menufix_node_submit($form, &$form_state) {
  if (!user_access('administer menu') && !empty($form['#node']->menu['mlid'])) {
    $form_state['node']->menu['enabled'] = 1;
    unset($form_state['values']['menu']);
  }
}

/**
 * Implements hook_url_outbound_alter().
 *
 * Adds the fragment portion of the url to the options array.
 */
function gsb_misc_fixes_url_outbound_alter(&$path, &$options, $original_path) {
  if (!$options['external']) {
    $url = parse_url($original_path);
    if (isset($url['fragment'])){
      // set path without the fragment
      $path = $url['path'];
      // prevent URL from re-aliasing
      $options['alias'] = TRUE;
      // set fragment
      $options['fragment'] = $url['fragment'];
      // set query params as key value pairs
      if (!empty($url['query'])) {
        $params = explode('&', $url['query']);
        foreach($params as $param) {
          list($k, $v) = explode('=', $param);
          $query[$k] = $v;
        }
        $options['query'] = $query;
      }
    }
  }
}
/**
 * Implements hook_block_view_alter().
 *
 * If the 'Hide current page link' is set, then remove any link in
 * menu_block that links to the node of the current page.
 */
function gsb_misc_fixes_block_view_alter(&$data, $block) {
  if ($block->module != 'menu_block') {
    return;
  }
  $menu_block_key = 'menu_block_' . $block->delta . '_hide_current_page_link';
  $hide_current_page_link = variable_get($menu_block_key, FALSE);
  if ($hide_current_page_link) {
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $nid = arg(1);
      if (isset($data['content']['#content'])) {
        foreach ($data['content']['#content'] as $key => $value) {
          if (!empty($data['content']['#content'][$key]['#href']) && $data['content']['#content'][$key]['#href'] == 'node/' . $nid) {
            unset($data['content']['#content'][$key]);
            break;
          }
        }
      }
    }
  }
}
/**
 * Inserts $item into the associative array after $in_array[$id] 
 */
function gsb_misc_fixes_associative_insert($in_array, $id, $item) {
  $out_array = array();
  foreach ($in_array as $key => $value) {
    $out_array[$key] = $value;
    if ($key === $id) {
      $item_key = key($item);
      $out_array[$item_key] = $item[$item_key];
    }
  }
  return $out_array;
}

/**
  * Implements hook_form_FORM_ID_alter().
  */
function gsb_misc_fixes_form_block_admin_configure_alter(&$form, &$form_state) {
  if ($form['#id'] === 'block-admin-configure') {
    $menu_block_key = 'menu_block_' . $form['delta']['#value'] . '_hide_current_page_link';
    $hide_current_page_link = variable_get($menu_block_key, FALSE);
    $item['hide_current_page_link'] = array(
      '#type' => 'checkbox',
      '#title' => t('Hide menu items that match the current page'),
      '#default_value' => $hide_current_page_link,
      '#states' => array(
        'visible' => array(
          ':input[name=display_options]' => array('value' => 'advanced'),
        )
      )
    );
    $form['settings'] = gsb_misc_fixes_associative_insert($form['settings'], 'depth', $item);
    $form['#submit'][] = 'gsb_misc_fixes_block_admin_configure_submit';
  }
}

/**
 * Submit handler for block_admin_configure form.
 *  - Save 'Hide current page link' setting.
 */
function gsb_misc_fixes_block_admin_configure_submit($form, &$form_state) {
  $menu_block_key = 'menu_block_' . $form['delta']['#value'] . '_hide_current_page_link';
  variable_set($menu_block_key, $form_state['values']['hide_current_page_link']);
}

/**
 * Creates a csv file from the $fields within $info. 
 * - Returns: The file $file_name is downloaded after all the rows in the .csv have been written. 
 */
 function gsb_misc_fixes_download_info($info, $file_name, $headers, $fields) {

  $fh = @fopen($file_name, 'w'); // The @ suppresses errors.

  // Add a header row
  @fputcsv($fh, $headers);

  // Loop through our info and write the csv data.
  foreach($info as $item) {
    $values = array();
    foreach ($fields as $field_name) {
      $values[] = $item->$field_name;
    }
    @fputcsv($fh, $values);
  }

  // Close & save the file.
  @fclose($fh);

  drupal_add_http_header('Content-Type', 'application/force-download');
  drupal_add_http_header('Pragma', 'public');
  drupal_add_http_header('Cache-Control', 'max-age=0');

  @readfile($file_name);  // The @ makes it silent.
  @unlink($file_name);  // Clean up, the @ makes it silent.

  exit();

}
